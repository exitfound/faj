---
- name: Destroy EC2 Instance
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    molecule_scenario_ephemeral_directory: "/tmp/"
    molecule_global_subnets_info: "vpc_subnet_info.yml"

    # Run config handling
    default_run_id: "{{ lookup('password', '/dev/null chars=ascii_lowercase length=5') }}"
    default_run_config:
      run_id: "{{ default_run_id }}"
    run_config_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/run-config.yml"
    run_config_from_file: "{{ (lookup('file', run_config_path, errors='ignore') or '{}') | from_yaml }}"
    run_config: '{{ default_run_config | combine(run_config_from_file) }}'

    # Platform settings handling
    default_aws_profile: "{{ lookup('env', 'AWS_PROFILE') }}"
    default_aws_region: eu-central-1
    default_key_inject_method: ec2 # valid values: [cloud-init, ec2]
    default_key_name: "molecule-{{ run_config.run_id }}"
    default_security_group_name: "molecule-{{ run_config.run_id }}"

    platform_defaults:
      aws_profile: "{{ default_aws_profile }}"
      region: "{{ default_aws_region }}"
      vpc_id: ""
      vpc_subnet_id: ""
      security_groups: []
      security_group_name: "{{ default_security_group_name }}"
      key_name: "{{ default_key_name }}"
      key_inject_method: "{{ default_key_inject_method }}"

    # Merging defaults into a list of dicts is, it turns out, not straightforward
    platforms: >-
      {{ [platform_defaults | dict2items]
            | product(molecule_yml.platforms | map('dict2items') | list)
            | map('flatten', levels=1)
            | list
            | map('items2dict')
            | map('combine', {
                'aws_profile': (aws_profile if aws_profile else default_aws_profile),
                'region': (aws_region if aws_region else default_aws_region),
                'key_name': (aws_custom_key_name if aws_custom_key_name else default_key_name),
                'key_inject_method': (aws_key_method if aws_key_method else default_key_inject_method),
                'vpc_subnet_id': aws_vpc_subnet_id,
                'vpc_id': aws_vpc_id,
                'security_group_name': (aws_security_group_name if aws_security_group_name else default_security_group_name)
                }
              )
            | list }}

    # Stored instance config
    instance_config: "{{ (lookup('file', molecule_instance_config, errors='ignore') or '{}') | from_yaml }}"

  pre_tasks:
    - name: Validate platform configurations
      ansible.builtin.assert:
        that:
          - platforms | length > 0
          - platform.name is string and platform.name | length > 0
          - platform.aws_profile is string
          - platform.key_inject_method is in ["cloud-init", "ec2"]
          - platform.key_name is string and platform.key_name | length > 0
          - platform.region is string
          - platform.security_group_name is string and platform.security_group_name | length > 0
          - platform.security_groups is sequence
          - platform.vpc_id is string
          - platform.vpc_subnet_id is string
        quiet: true
      loop: '{{ platforms }}'
      loop_control:
        loop_var: platform
        label: "{{ platform.name }}"

  tasks:
    - name: Look up subnets to determine VPCs (only if VPC or Subnet is defined in the variable)
      amazon.aws.ec2_vpc_subnet_info:
        profile: "{{ item.aws_profile | default(omit) }}"
        region: "{{ item.region | default(omit) }}"
        subnet_ids: "{{ item.vpc_subnet_id }}"
      loop: "{{ platforms }}"
      loop_control:
        label: "{{ item.name }}"
      when: not item.vpc_id and item.vpc_subnet_id
      register: subnet_info

    - name: Check that network info file exist
      stat:
        path: "{{ molecule_scenario_ephemeral_directory }}/{{ molecule_global_subnets_info }}"
      register: vpc_subnet_file

    - name: Load VPC and Subnet information from file (if file exist)
      include_vars:
        file: "{{ molecule_scenario_ephemeral_directory }}/{{ molecule_global_subnets_info }}"
      when: vpc_subnet_file.stat.exists

    - name: Update existing platform with current VPC and Subnet IDs from an information file
      set_fact:
        platforms: >-
          {{
            platforms | map('combine', {
              'vpc_id': vpc_id | string,
              'vpc_subnet_id': vpc_subnet_id | string,
              'vpc_subnet_route_table': vpc_subnet_route_table | string
              }) | list
          }}
      when:
        - vpc_subnet_file.stat.exists
        - vpc_id is defined
        - vpc_subnet_id is defined
        - vpc_subnet_route_table is defined

    - name: Validate discovered information
      ansible.builtin.assert:
        that:
          - platform.vpc_id or (subnet_info.results[index].subnets | default([]) | length > 0)
        quiet: true
      loop: "{{ platforms }}"
      loop_control:
        loop_var: platform
        label: "{{ platform.name }}"
      when: platform.vpc_id or platform.vpc_subnet_id

    - name: Destroy resources
      when: instance_config | length != 0
      block:
        - name: Destroy ephemeral EC2 instance(s)
          amazon.aws.ec2_instance:
            profile: "{{ item.aws_profile | default(omit) }}"
            region: "{{ item.region | default(omit) }}"
            instance_ids: "{{ instance_config | map(attribute='instance_ids') | flatten }}"
            vpc_subnet_id: "{{ item.vpc_subnet_id }}"
            state: absent
          loop: "{{ platforms }}"
          loop_control:
            label: "{{ item.name }}"
          register: ec2_instances_async
          async: 7200
          poll: 0

        - name: Wait for instance destruction to complete
          ansible.builtin.async_status:
            jid: "{{ item.ansible_job_id }}"
          loop: "{{ ec2_instances_async.results }}"
          loop_control:
            index_var: index
            label: "{{ platforms[index].name }}"
          register: ec2_instances
          until: ec2_instances is finished
          retries: 300

        - name: Write Molecule instance configs
          ansible.builtin.copy:
            dest: "{{ molecule_instance_config }}"
            mode: "0600"
            content: "{{ {} | to_yaml }}"

    - name: Destroy ephemeral Security Group (if SG early was created)
      amazon.aws.ec2_security_group:
        profile: "{{ item.aws_profile | default(omit) }}"
        region: "{{ item.region | default(omit) }}"
        name: "{{ item.security_group_name | default(omit) }}"
        vpc_id: "{{ item.vpc_id or vpc_subnet.vpc_id }}"
        state: absent
      vars:
        vpc_subnet: "{{ subnet_info.results[index].subnets[0] | default([]) }}"
      loop: "{{ platforms }}"
      loop_control:
        index_var: index
        label: "{{ item.name }}"
      when: >
        item.security_group_name is defined and
        item.security_group_name | length > 0 and
        (item.vpc_id is defined and item.vpc_id | length > 0 or
        item.vpc_subnet_id is defined and item.vpc_subnet_id | length > 0)

    - name: Delete ephemeral network resources (if VPC and Subnet early was created)
      when:
        - aws_vpc_id is not defined or aws_vpc_id | length == 0
        - aws_vpc_subnet_id is not defined or aws_vpc_subnet_id | length == 0
      block:
        - name: Destroy ephemeral Internet Gateway
          amazon.aws.ec2_vpc_igw:
            region: "{{ item.region | default(omit) }}"
            vpc_id: "{{ item.vpc_id }}"
            state: absent
          loop: "{{ platforms }}"
          loop_control:
            index_var: index
            label: "{{ item.name }}"
          when:
            - item.vpc_subnet_id is defined and item.vpc_subnet_id | length > 0

        - name: Destroy ephemeral Public Subnet
          amazon.aws.ec2_vpc_subnet:
            region: "{{ item.region | default(omit) }}"
            vpc_id: "{{ item.vpc_id }}"
            cidr: "10.10.0.0/24"
            state: absent
          loop: "{{ platforms }}"
          loop_control:
            index_var: index
            label: "{{ item.name }}"
          when:
            - item.vpc_subnet_id is defined and item.vpc_subnet_id | length > 0

        - name: Destroy ephemeral VPC
          amazon.aws.ec2_vpc_net:
            region: "{{ item.region | default(omit) }}"
            profile: "{{ item.aws_profile | default(omit) }}"
            vpc_id: "{{ item.vpc_id }}"
            state: absent
          loop: "{{ platforms }}"
          loop_control:
            index_var: idx
            label: "{{ item.name }}"
          when:
            - item.vpc_id is defined and item.vpc_id | length > 0
            - idx == 0

    - name: Destroy ephemeral EC Key Pair (if Key Pair early was created)
      amazon.aws.ec2_key:
        profile: "{{ item.aws_profile | default(omit) }}"
        region: "{{ item.region | default(omit) }}"
        name: "{{ item.key_name | default(omit) }}"
        state: absent
      loop: "{{ platforms }}"
      loop_control:
        index_var: index
        label: "{{ item.name }}"
      when: item.key_inject_method == "cloud-init" or item.key_inject_method == "ec2"

    - name: Remove network information file after all tasks
      file:
        path: "{{ molecule_scenario_ephemeral_directory }}/{{ molecule_global_subnets_info }}"
        state: absent
      when: vpc_subnet_file.stat.exists
